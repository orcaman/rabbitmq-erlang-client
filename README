AMQP client for Erlang
======================
This code implements a client for AMQP in the Erlang programming
language.

This client offers both a networked version that uses standard
TCP-based AMQP framing and a direct client that uses native Erlang
message passing to a RabbitMQ broker.

The API exposed to the user is common to both clients, so each version
can be used interchangeably without having to modify any client code.

The TCP networked client has been tested with RabbitMQ server 1.2.0,
but should theoretically work with any 0-8 compliant AMQP server.

The direct client is bound to an 0-8 compliant broker using native
Erlang message passing, which in the absence of an alternative Erlang
AMQP implementation means that it only works with RabbitMQ.

It does however provide a level of abstraction above the internal
server API of RabbitMQ, meaning that you can write client code in
Erlang and still remain isolated from any API changes in the
underlying broker.

It also provides a client-orientated API into RabbitMQ, allowing the
user to reuse AMQP knowledge gained by using AMQP clients in other
languages.

The advantage of the direct client is that it eliminates the network
overhead as well as the marshaling to and from the AMQP wire format,
so that neither side has to decode or encode any AMQP frames.

Prerequisites
-------------
In order to compile/run this code you must have the following
installed:

- Erlang/OTP, R11B-0 or later, http://www.erlang.org/download.html
- The RabbitMQ server, 200710071940 snapshot or later,
  http://dev.rabbitmq.com/snapshots/rabbitmq/
  Compile and install this in the OTP library directory.
- Eunit, latest version from svn at
  http://svn.process-one.net/contribs/trunk/eunit
  Compile and install this in the OTP library directory.

Compile the Erlang client
-------------------------
Go to the base directory of the AMQP Erlang client directory and run
'make'.

Running the network client
--------------------------
In order to run the network client, you need to run the RabbitMQ
server in a separate Erlang process (or use any other AMQP
server). Start your server as usual.

After you have done this, you can run the unit tests:

$ make test_network

To get more examples of the API, look at the functions in the
test_util module.

Running the direct client
-------------------------
The direct client has to be run in the same Erlang VM instance as the
RabbitMQ server.

The included Makefile will do this if the RabbitMQ server has been installed
such that the script rabbitmq-server is in the path (note that /usr/sbin may
not be in your path).

After you have checked this, you can run the unit tests:

$ make test_direct

Running the Integration Scenarios
---------------------------------

The network_integration_test module demonstrates how the base API can be
extended to implement an Rpc client over AMQP.

This client does a full Rpc end to end by combining the AMQP transport 
with the Hessian data binding protocol.

To run this test end to end, you will need to install the Erlang module
for hessian into to the default OTP library path.

The Hessian library can be downloaded from http://cotton.sourceforge.net/,
version 0.1.2 or later is required.
