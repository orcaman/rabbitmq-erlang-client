AMQP client for Erlang
======================
This code implements a client for AMQP in the Erlang programming
language.

This client offers both a networked version that uses standard
TCP-based AMQP framing and a direct client that uses native Erlang
message passing to a RabbitMQ broker.

The API exposed to the user is common to both clients, so each version
can be used interchangeably without having to modify any client code.

The TCP networked client has been tested with RabbitMQ server 1.2.0,
but should theoretically work with any 0-8 compliant AMQP server.

The direct client is bound to an 0-8 compliant broker using native
Erlang message passing, which in the absence of an alternative Erlang
AMQP implementation means that it only works with RabbitMQ.

It does however provide a level of abstraction above the internal
server API of RabbitMQ, meaning that you can write client code in
Erlang and still remain isolated from any API changes in the
underlying broker.

It also provides a client-orientated API into RabbitMQ, allowing the
user to reuse AMQP knowledge gained by using AMQP clients in other
languages.

The advantage of the direct client is that it eliminates the network
overhead as well as the marshaling to and from the AMQP wire format,
so that neither side has to decode or encode any AMQP frames.

Prerequisites
-------------
In order to compile/run this code you must have the following
installed:

- Erlang/OTP, R12B-5 or later, http://www.erlang.org/download.html
- The RabbitMQ server, 93cc2ca0ba62 or later

Compiling the Erlang client
-------------------------
Go to the base directory of the AMQP Erlang client directory and run
'make'.

* If you have "installed" the RabbitMQ server:

You will have a symlink to the rabbitmq-server directory in your OTP
directory, so when running the make, you will want to unset the $BROKER_DIR
variable:

    $ make -BROKER_DIR=

* If you don't have the RabbitMQ server installed:

You will need to get a copy of the server in order to be able to use it's
header files and runtime libraries. A good place to put this is in the sibling
directory to the Erlang client, which is the default that Makefile expects. If
it is not, then you need to specify the path to this directory:

    $ make -BROKER_DIR=WHEREEVER_YOU_PUT_THIS

Running the network client
--------------------------
In order to run the network client, you need to run the RabbitMQ
server in a separate Erlang process (or use any other AMQP
server). Start your server as usual.

After you have done this, you can run the unit tests:

$ make test_network

To get more examples of the API, look at the functions in the
test_util module.

Running the direct client
-------------------------
The direct client has to be run in the same Erlang VM instance as the
RabbitMQ server.

$ make test_direct

